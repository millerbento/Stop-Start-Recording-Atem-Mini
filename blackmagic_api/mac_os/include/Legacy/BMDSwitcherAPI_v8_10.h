/* -LICENSE-START-
 ** Copyright (c) 2022 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V8_10_H
#define BMD_BMDSWITCHERAPI_V8_10_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcher_v8_10                                 = /* 00E7C247-9504-452B-AC97-F56EC3A180DE */ { 0x00,0xE7,0xC2,0x47,0x95,0x04,0x45,0x2B,0xAC,0x97,0xF5,0x6E,0xC3,0xA1,0x80,0xDE };
BMD_CONST REFIID IID_IBMDSwitcherDiscovery_v8_10                        = /* 1BE1FC40-E404-48C5-BAB6-535D27D8AF88 */ { 0x1B,0xE1,0xFC,0x40,0xE4,0x04,0x48,0xC5,0xBA,0xB6,0x53,0x5D,0x27,0xD8,0xAF,0x88 };
BMD_CONST REFIID IID_IBMDSwitcherInputIterator_v8_10                    = /* 275E9888-2F65-4B2E-9434-1937A72B9EC4 */ { 0x27,0x5E,0x98,0x88,0x2F,0x65,0x4B,0x2E,0x94,0x34,0x19,0x37,0xA7,0x2B,0x9E,0xC4 };
BMD_CONST REFIID IID_IBMDSwitcherInput_v8_10                            = /* 0B182DF9-3732-4B1C-921B-C3B914AD441F */ { 0x0B,0x18,0x2D,0xF9,0x37,0x32,0x4B,0x1C,0x92,0x1B,0xC3,0xB9,0x14,0xAD,0x44,0x1F };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioSource_v8_10             = /* D8D1D78D-0B9F-4300-9734-AE8DA35A8ECA */ { 0xD8,0xD1,0xD7,0x8D,0x0B,0x9F,0x43,0x00,0x97,0x34,0xAE,0x8D,0xA3,0x5A,0x8E,0xCA };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioSourceIterator_v8_10     = /* 050233A3-3244-46B0-A7CD-EF37A869ACDD */ { 0x05,0x02,0x33,0xA3,0x32,0x44,0x46,0xB0,0xA7,0xCD,0xEF,0x37,0xA8,0x69,0xAC,0xDD };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioMixer_v8_10              = /* BC625428-D969-4512-9462-8AF8B65F0B21 */ { 0xBC,0x62,0x54,0x28,0xD9,0x69,0x45,0x12,0x94,0x62,0x8A,0xF8,0xB6,0x5F,0x0B,0x21 };


#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcher_v8_10;
class IBMDSwitcherDiscovery_v8_10;
class IBMDSwitcherInputIterator_v8_10;
class IBMDSwitcherInput_v8_10;
class IBMDSwitcherFairlightAudioSource_v8_10;
class IBMDSwitcherFairlightAudioSourceIterator_v8_10;

/* Interface IBMDSwitcher_v8_10 - Switcher Object */

class BMD_PUBLIC IBMDSwitcher_v8_10 : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT DoesVideoModeChangeRequireReconfiguration (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* required) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT Get3GSDIOutputLevel (/* out */ BMDSwitcher3GSDIOutputLevel* outputLevel) = 0;
    virtual HRESULT Set3GSDIOutputLevel (/* in */ BMDSwitcher3GSDIOutputLevel outputLevel) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT GetTimeCode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT SetTimeCode (/* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT RequestTimeCode (void) = 0;
    virtual HRESULT GetTimeCodeLocked (/* out */ bool* timeCodeLocked) = 0;
    virtual HRESULT GetTimeCodeMode (/* out */ BMDSwitcherTimeCodeMode* timeCodeMode) = 0;
    virtual HRESULT SetTimeCodeMode (/* in */ BMDSwitcherTimeCodeMode timeCodeMode) = 0;
    virtual HRESULT GetAreOutputsConfigurable (/* out */ bool* configurable) = 0;
    virtual HRESULT GetSuperSourceCascade (/* out */ bool* cascade) = 0;
    virtual HRESULT SetSuperSourceCascade (/* in */ bool cascade) = 0;
    virtual HRESULT SuspendStreaming (/* in */ uint32_t durationMs) = 0;
    virtual HRESULT AllowStreamingToResume (void) = 0;
    virtual HRESULT DoesSupportAutoVideoMode (/* out */ bool* supported) = 0;
    virtual HRESULT GetAutoVideoMode (/* out */ bool* enabled) = 0;
    virtual HRESULT GetAutoVideoModeDetected (/* out */ bool* detected) = 0;
    virtual HRESULT SetAutoVideoMode (/* in */ bool enabled) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
protected:
    virtual ~IBMDSwitcher_v8_10 () {} // call Release method to drop reference count
};
/* Interface IBMDSwitcherDiscovery_v8_10 - Used to discover and connect to switchers */
class BMD_PUBLIC IBMDSwitcherDiscovery_v8_10 : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher_v8_10** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;
protected:
    virtual ~IBMDSwitcherDiscovery_v8_10 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputIterator_v8_10 - Input Iterator */

class BMD_PUBLIC IBMDSwitcherInputIterator_v8_10 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherInput_v8_10** input) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherInputId inputId, /* out */ IBMDSwitcherInput_v8_10** input) = 0;

protected:
    virtual ~IBMDSwitcherInputIterator_v8_10 () {} // call Release method to drop reference count
};


/* Interface IBMDSwitcherInput_v8_10 - Switcher Input Object */

class BMD_PUBLIC IBMDSwitcherInput_v8_10 : public IUnknown
{
public:
    virtual HRESULT GetPortType (/* out */ BMDSwitcherPortType* type) = 0;
    virtual HRESULT GetInputAvailability (/* out */ BMDSwitcherInputAvailability* availability) = 0;
    virtual HRESULT SetShortName (/* in */ CFStringRef name) = 0;
    virtual HRESULT GetShortName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT SetLongName (/* in */ CFStringRef name) = 0;
    virtual HRESULT GetLongName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT AreNamesDefault (/* in */ bool* isDefault) = 0;
    virtual HRESULT ResetNames (void) = 0;
    virtual HRESULT IsProgramTallied (/* out */ bool* isTallied) = 0;
    virtual HRESULT IsPreviewTallied (/* out */ bool* isTallied) = 0;
    virtual HRESULT GetAvailableExternalPortTypes (/* out */ BMDSwitcherExternalPortType* types) = 0;
    virtual HRESULT SetCurrentExternalPortType (/* in */ BMDSwitcherExternalPortType value) = 0;
    virtual HRESULT GetCurrentExternalPortType (/* out */ BMDSwitcherExternalPortType* value) = 0;
    virtual HRESULT GetInputId (/* out */ BMDSwitcherInputId* inputId) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherInput_v8_10 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioSource_v8_10 - Fairlight Audio Source Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioSource_v8_10 : public IUnknown
{
public:
	virtual HRESULT IsActive (/* out */ bool* active) = 0;
	virtual HRESULT GetSourceType (/* out */ BMDSwitcherFairlightAudioSourceType* type) = 0;
	virtual HRESULT GetMaxDelayFrames (/* out */ uint16_t* maxDelay) = 0;
	virtual HRESULT GetDelayFrames (/* out */ uint16_t* delay) = 0;
	virtual HRESULT SetDelayFrames (/* in */ uint16_t delay) = 0;
	virtual HRESULT GetInputGain (/* out */ double* gain) = 0;
	virtual HRESULT SetInputGain (/* in */ double gain) = 0;
	virtual HRESULT HasStereoSimulation (/* out */ bool* hasStereoSimulation) = 0;
	virtual HRESULT GetStereoSimulationIntensity (/* out */ double* intensity) = 0;
	virtual HRESULT SetStereoSimulationIntensity (/* in */ double intensity) = 0;
	virtual HRESULT GetEffect (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
	virtual HRESULT GetPan (/* out */ double* pan) = 0;
	virtual HRESULT SetPan (/* in */ double pan) = 0;
	virtual HRESULT GetFaderGain (/* out */ double* gain) = 0;
	virtual HRESULT SetFaderGain (/* in */ double gain) = 0;
	virtual HRESULT GetSupportedMixOptions (/* out */ BMDSwitcherFairlightAudioMixOption* mixOptions) = 0;
	virtual HRESULT GetMixOption (/* out */ BMDSwitcherFairlightAudioMixOption* mixOption) = 0;
	virtual HRESULT SetMixOption (/* in */ BMDSwitcherFairlightAudioMixOption mixOption) = 0;
	virtual HRESULT IsMixedIn (/* out */ bool* mixedIn) = 0;
	virtual HRESULT ResetOutputPeakLevels (void) = 0;
	virtual HRESULT GetId (/* out */ BMDSwitcherFairlightAudioSourceId* sourceId) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioSourceCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioSourceCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherFairlightAudioSource_v8_10 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioSourceIterator - Fairlight Audio Source Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioSourceIterator_v8_10 : public IUnknown
{
public:
	virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioSource_v8_10** audioSource) = 0;
	virtual HRESULT GetById (/* in */ BMDSwitcherFairlightAudioSourceId audioSourceId, /* out */ IBMDSwitcherFairlightAudioSource_v8_10** audioSource) = 0;

protected:
	virtual ~IBMDSwitcherFairlightAudioSourceIterator_v8_10 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioMixer_v8_10 - Fairlight Audio Mixer Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioMixer_v8_10 : public IUnknown
{
public:
	virtual HRESULT GetMasterOutEffect (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
	virtual HRESULT GetMasterOutFaderGain (/* out */ double* gain) = 0;
	virtual HRESULT SetMasterOutFaderGain (/* in */ double gain) = 0;
	virtual HRESULT GetMasterOutFollowFadeToBlack (/* out */ bool* follow) = 0;
	virtual HRESULT SetMasterOutFollowFadeToBlack (/* in */ bool follow) = 0;
	virtual HRESULT GetAudioFollowVideoCrossfadeTransition (/* out */ bool* transition) = 0;
	virtual HRESULT SetAudioFollowVideoCrossfadeTransition (/* in */ bool transition) = 0;
	virtual HRESULT SetAllLevelNotificationsEnabled (/* in */ bool enabled) = 0;
	virtual HRESULT ResetMasterOutPeakLevels (void) = 0;
	virtual HRESULT ResetAllPeakLevels (void) = 0;
	virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioMixerCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioMixerCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherFairlightAudioMixer_v8_10 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V8_10_H) */
