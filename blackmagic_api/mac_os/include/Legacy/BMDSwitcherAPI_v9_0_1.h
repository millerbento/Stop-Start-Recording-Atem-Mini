/* -LICENSE-START-
 ** Copyright (c) 2023 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V9_0_1_H
#define BMD_BMDSWITCHERAPI_V9_0_1_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcherHyperDeck_v9_0_1           = /* 6BB0F7E1-2013-4C8F-A4C0-1016B0C37D14 */ { 0x6B,0xB0,0xF7,0xE1,0x20,0x13,0x4C,0x8F,0xA4,0xC0,0x10,0x16,0xB0,0xC3,0x7D,0x14 };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckIterator_v9_0_1   = /* 35879F23-168D-4AF2-80B0-6D72838E17F9 */ { 0x35,0x87,0x9F,0x23,0x16,0x8D,0x4A,0xF2,0x80,0xB0,0x6D,0x72,0x83,0x8E,0x17,0xF9 };
BMD_CONST REFIID IID_IBMDSwitcherRecordDisk_v9_0_1          = /* 2F2046BD-E6FC-4CC0-8689-94454F027997 */ { 0x2F,0x20,0x46,0xBD,0xE6,0xFC,0x4C,0xC0,0x86,0x89,0x94,0x45,0x4F,0x02,0x79,0x97 };
BMD_CONST REFIID IID_IBMDSwitcherRecordDiskIterator_v9_0_1  = /* 777B5A46-83EF-4615-9722-146C79436927 */ { 0x77,0x7B,0x5A,0x46,0x83,0xEF,0x46,0x15,0x97,0x22,0x14,0x6C,0x79,0x43,0x69,0x27 };
BMD_CONST REFIID IID_IBMDSwitcherRecordAV_v9_0_1            = /* 916580BA-8655-4195-8138-EA038981A1FE */ { 0x91,0x65,0x80,0xBA,0x86,0x55,0x41,0x95,0x81,0x38,0xEA,0x03,0x89,0x81,0xA1,0xFE };
BMD_CONST REFIID IID_IBMDSwitcherStreamRTMP_v9_0_1          = /* 30CC3D23-DE0A-48CE-B46F-854D0C630549 */ { 0x30,0xCC,0x3D,0x23,0xDE,0x0A,0x48,0xCE,0xB4,0x6F,0x85,0x4D,0x0C,0x63,0x05,0x49 };


#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherHyperDeckIterator_v9_0_1;
class IBMDSwitcherHyperDeck_v9_0_1;
class IBMDSwitcherRecordDiskIterator_v9_0_1;
class IBMDSwitcherRecordDisk_v9_0_1;
class IBMDSwitcherRecordAV_v9_0_1;
class IBMDSwitcherStreamRTMP_v9_0_1;

/* Interface IBMDSwitcherHyperDeck_v9_0_1 - Remote Control of HyperDecks */

class BMD_PUBLIC IBMDSwitcherHyperDeck_v9_0_1 : public IUnknown
{
public:
    virtual HRESULT GetId (/* out */ BMDSwitcherHyperDeckId* hyperDeckId) = 0;
    virtual HRESULT GetConnectionStatus (/* out */ BMDSwitcherHyperDeckConnectionStatus* status) = 0;
    virtual HRESULT IsRemoteAccessEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT GetStorageMediaCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT GetStorageMediaState (/* in */ uint32_t storageMediaId, /* out */ BMDSwitcherHyperDeckStorageMediaState* state) = 0;
    virtual HRESULT GetActiveStorageMedia (/* out */ int32_t* index) = 0;
    virtual HRESULT SetActiveStorageMedia (/* in */ int32_t index) = 0;
    virtual HRESULT GetClipCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetSwitcherInput (/* out */ BMDSwitcherInputId* inputId) = 0;
    virtual HRESULT SetSwitcherInput (/* in */ BMDSwitcherInputId inputId) = 0;
    virtual HRESULT GetFrameRate (/* out */ uint32_t* frameRate, /* out */ uint32_t* timeScale) = 0;
    virtual HRESULT IsInterlacedVideo (/* out */ bool* isInterlaced) = 0;
    virtual HRESULT IsDropFrameTimeCode (/* out */ bool* isDropFrame) = 0;
    virtual HRESULT GetPlayerState (/* out */ BMDSwitcherHyperDeckPlayerState* state) = 0;
    virtual HRESULT GetCurrentClip (/* out */ BMDSwitcherHyperDeckClipId* clipId) = 0;
    virtual HRESULT SetCurrentClip (/* in */ BMDSwitcherHyperDeckClipId clipId) = 0;
    virtual HRESULT GetCurrentClipTime (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT SetCurrentClipTime (/* in */ uint16_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT GetCurrentTimelineTime (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT SetCurrentTimelineTime (/* in */ uint16_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT GetEstimatedRecordTimeRemaining (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT Play (void) = 0;
    virtual HRESULT Record (void) = 0;
    virtual HRESULT Stop (void) = 0;
    virtual HRESULT Shuttle (/* in */ int32_t speedPercent) = 0;
    virtual HRESULT GetShuttleSpeed (/* out */ int32_t* speedPercent) = 0;
    virtual HRESULT Jog (/* in */ int32_t frameDelta) = 0;
    virtual HRESULT GetLoopedPlayback (/* out */ bool* loop) = 0;
    virtual HRESULT SetLoopedPlayback (/* in */ bool loop) = 0;
    virtual HRESULT GetSingleClipPlayback (/* out */ bool* single) = 0;
    virtual HRESULT SetSingleClipPlayback (/* in */ bool single) = 0;
    virtual HRESULT GetAutoRollOnTake (/* out */ bool* autoRollOnTake) = 0;
    virtual HRESULT SetAutoRollOnTake (/* in */ bool autoRollOnTake) = 0;
    virtual HRESULT GetAutoRollOnTakeFrameDelay (/* out */ uint16_t* frameDelay) = 0;
    virtual HRESULT SetAutoRollOnTakeFrameDelay (/* in */ uint16_t frameDelay) = 0;
    virtual HRESULT GetNetworkAddress (/* out */ uint32_t* address) = 0;
    virtual HRESULT SetNetworkAddress (/* in */ uint32_t address) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherHyperDeckCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherHyperDeckCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeck_v9_0_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckIterator_v9_0_1 - HyperDeck Iterator */

class BMD_PUBLIC IBMDSwitcherHyperDeckIterator_v9_0_1 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherHyperDeck_v9_0_1** hyperDeck) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherHyperDeckId hyperDeckId, /* out */ IBMDSwitcherHyperDeck_v9_0_1** hyperDeck) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckIterator_v9_0_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordDiskIterator_v9_0_1 - Record Disk Iterator */

class BMD_PUBLIC IBMDSwitcherRecordDiskIterator_v9_0_1 : public IUnknown
{
public:
	virtual HRESULT Next (/* out */ IBMDSwitcherRecordDisk_v9_0_1** recordDisk) = 0;
	virtual HRESULT GetById (/* in */ BMDSwitcherRecordDiskId diskId, /* out */ IBMDSwitcherRecordDisk_v9_0_1** disk) = 0;

protected:
	virtual ~IBMDSwitcherRecordDiskIterator_v9_0_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordDisk_v9_0_1 - Record Disk Object */

class BMD_PUBLIC IBMDSwitcherRecordDisk_v9_0_1 : public IUnknown
{
public:
	virtual HRESULT GetId(/* out */ BMDSwitcherRecordDiskId* diskId) = 0;
	virtual HRESULT GetVolumeName(/* out */ CFStringRef* volumeName) = 0;
	virtual HRESULT GetRecordingTimeAvailable(/* out */ uint32_t* recordingTimeAvailable) = 0;
	virtual HRESULT GetStatus(/* out */ BMDSwitcherRecordDiskStatus* diskStatus) = 0;
	virtual HRESULT AddCallback(/* in */ IBMDSwitcherRecordDiskCallback* callback) = 0;
	virtual HRESULT RemoveCallback(/* in */ IBMDSwitcherRecordDiskCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherRecordDisk_v9_0_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordAV - Switcher RecordAV Object */

class BMD_PUBLIC IBMDSwitcherRecordAV_v9_0_1 : public IUnknown
{
public:
	virtual HRESULT StartRecording (void) = 0;
	virtual HRESULT StopRecording (void) = 0;
	virtual HRESULT SwitchDisk (void) = 0;
	virtual HRESULT IsRecording (/* out */ bool* recording) = 0;
	virtual HRESULT GetStatus (/* out */ BMDSwitcherRecordAVState* state, /* out */ BMDSwitcherRecordAVError* error) = 0;
	virtual HRESULT SetFilename (/* in */ CFStringRef filename) = 0;
	virtual HRESULT GetFilename (/* out */ CFStringRef* filename) = 0;
	virtual HRESULT SetRecordInAllCameras (/* in */ bool recordInAllCameras) = 0;
	virtual HRESULT GetRecordInAllCameras (/* out */ bool* recordInAllCameras) = 0;
	virtual HRESULT DoesSupportISORecording (/* out */ bool* supportsISORecording) = 0;
	virtual HRESULT SetRecordAllISOInputs (/* in */ bool recordAllISOInputs) = 0;
	virtual HRESULT GetRecordAllISOInputs (/* out */ bool* recordAllISOInputs) = 0;
	virtual HRESULT GetWorkingSetLimit (/* out */ uint32_t* workingSetLimit) = 0;
	virtual HRESULT SetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
	virtual HRESULT GetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* out */ BMDSwitcherRecordDiskId* diskId) = 0;
	virtual HRESULT GetActiveDiskIndex (/* out */ uint32_t* workingSetIndex) = 0;
	virtual HRESULT RequestDuration (void) = 0;
	virtual HRESULT GetDuration (/* out */ uint64_t* duration) = 0;
	virtual HRESULT GetTimecode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
	virtual HRESULT GetTotalRecordingTimeAvailable (/* out */ uint32_t* totalRecordingTimeAvailable) = 0;
	virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherRecordAV_v9_0_1 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStreamRTMP - Switcher Stream RTMP Object */

class BMD_PUBLIC IBMDSwitcherStreamRTMP_v9_0_1 : public IUnknown
{
public:
	virtual HRESULT StartStreaming (void) = 0;
	virtual HRESULT StopStreaming (void) = 0;
	virtual HRESULT IsStreaming (/* out */ bool* streaming) = 0;
	virtual HRESULT GetStatus (/* out */ BMDSwitcherStreamRTMPState* state, /* out */ BMDSwitcherStreamRTMPError* error) = 0;
	virtual HRESULT SetServiceName (/* in */ CFStringRef serviceName) = 0;
	virtual HRESULT GetServiceName (/* out */ CFStringRef* serviceName) = 0;
	virtual HRESULT SetUrl (/* in */ CFStringRef url) = 0;
	virtual HRESULT GetUrl (/* out */ CFStringRef* url) = 0;
	virtual HRESULT SetKey (/* in */ CFStringRef url) = 0;
	virtual HRESULT GetKey (/* out */ CFStringRef* key) = 0;
	virtual HRESULT SetVideoBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
	virtual HRESULT GetVideoBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
	virtual HRESULT SetAudioBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
	virtual HRESULT GetAudioBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
	virtual HRESULT RequestDuration (void) = 0;
	virtual HRESULT GetDuration (/* out */ uint64_t* duration) = 0;
	virtual HRESULT GetTimecode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
	virtual HRESULT GetEncodingBitrate (/* out */ uint32_t* encodingBitrate) = 0;
	virtual HRESULT GetCacheUsed (/* out */ double* cacheUsed) = 0;
	virtual HRESULT SetAuthentication (/* in */ CFStringRef username, /* in */ CFStringRef password) = 0;
	virtual HRESULT GetAuthentication (/* out */ CFStringRef* username, /* out */ CFStringRef* password) = 0;
	virtual HRESULT SetLowLatency (/* in */ bool lowLatency) = 0;
	virtual HRESULT GetLowLatency (/* out */ bool* lowLatency) = 0;
	virtual HRESULT AddCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;
	virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;

protected:
	virtual ~IBMDSwitcherStreamRTMP_v9_0_1 () {} // call Release method to drop reference count
};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V9_0_1_H) */
