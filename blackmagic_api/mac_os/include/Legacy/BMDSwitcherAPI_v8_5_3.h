/* -LICENSE-START-
 ** Copyright (c) 2019 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef BMD_BMDSWITCHERAPI_V8_5_3_H
#define BMD_BMDSWITCHERAPI_V8_5_3_H


#ifndef BMD_CONST
	#if defined(_MSC_VER)
		#define BMD_CONST __declspec(selectany) static const
	#else
		#define BMD_CONST static const
	#endif
#endif

#include "BMDSwitcherAPI.h"

BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3    = /* A9E5FB7D-A436-4179-9F3F-FF2BD5580830 */ { 0xA9,0xE5,0xFB,0x7D,0xA4,0x36,0x41,0x79,0x9F,0x3F,0xFF,0x2B,0xD5,0x58,0x08,0x30 };

BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3 = /* 63EED6B1-D574-4312-90B4-F6DEBC290701 */ { 0x63,0xEE,0xD6,0xB1,0xD5,0x74,0x43,0x12,0x90,0xB4,0xF6,0xDE,0xBC,0x29,0x07,0x01 };

BMD_CONST REFIID IID_IBMDSwitcherRecordAV_v8_5_3 = /* 43C5A333-3DF4-4DF2-8F81-0A994CE63315 */ { 0x43,0xC5,0xA3,0x33,0x3D,0xF4,0x4D,0xF2,0x8F,0x81,0x0A,0x99,0x4C,0xE6,0x33,0x15 };

BMD_CONST REFIID IID_IBMDSwitcherStreamRTMP_v8_5_3 = /* 89A72582-A54B-40B6-9CFB-9B750D6C5DD9 */ { 0x89,0xA7,0x25,0x82,0xA5,0x4B,0x40,0xB6,0x9C,0xFB,0x9B,0x75,0x0D,0x6C,0x5D,0xD9 };

BMD_CONST REFIID IID_IBMDSwitcherFairlightAnalogAudioInput_v8_5_3        = /* C3F347F3-49BB-4832-835C-E329FBF5707E */ { 0xC3,0xF3,0x47,0xF3,0x49,0xBB,0x48,0x32,0x83,0x5C,0xE3,0x29,0xFB,0xF5,0x70,0x7E };
#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3;
class IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3;
class IBMDSwitcherRecordAV_v8_5_3;
class IBMDSwitcherStreamRTMP_v8_5_3;
class IBMDSwitcherFairlightAnalogAudioInput_v8_5_3;

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3 - Switcher Stream RTMP Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3 : public IUnknown
{
	public:
    virtual HRESULT GetGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputMasterOutGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputMasterOutGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputTalkbackGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputTalkbackGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputSidetoneGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputSidetoneGain (/* in */ double decibel) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3 - Fairlight Audio Headphone Output Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3 : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioHeadphoneOutput_v8_5_3** audioHeadphoneOutput) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioHeadphoneOutputIterator_v8_5_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordAV_v8_5_3  - Switcher RecordAV Object */

class BMD_PUBLIC IBMDSwitcherRecordAV_v8_5_3 : public IUnknown
{
public:
    virtual HRESULT StartRecording (void) = 0;
    virtual HRESULT StopRecording (void) = 0;
    virtual HRESULT SwitchDisk (void) = 0;
    virtual HRESULT IsRecording (/* out */ bool* recording) = 0;
    virtual HRESULT GetStatus (/* out */ BMDSwitcherRecordAVState* state, /* out */ BMDSwitcherRecordAVError* error) = 0;
    virtual HRESULT SetFilename (/* in */ CFStringRef filename) = 0;
    virtual HRESULT GetFilename (/* out */ CFStringRef* filename) = 0;
    virtual HRESULT SetRecordInAllCameras (/* in */ bool recordInAllCameras) = 0;
    virtual HRESULT GetRecordInAllCameras (/* out */ bool* recordInAllCameras) = 0;
    virtual HRESULT DoesSupportISORecording (/* out */ bool* supportsISORecording) = 0;
    virtual HRESULT SetRecordAllISOInputs (/* in */ bool recordAllISOInputs) = 0;
    virtual HRESULT GetRecordAllISOInputs (/* out */ bool* recordAllISOInputs) = 0;
    virtual HRESULT GetWorkingSetLimit (/* out */ uint32_t* workingSetLimit) = 0;
    virtual HRESULT SetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
    virtual HRESULT GetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* out */ BMDSwitcherRecordDiskId* diskId) = 0;
    virtual HRESULT GetActiveDiskIndex (/* out */ uint32_t* workingSetIndex) = 0;
    virtual HRESULT RequestDuration (void) = 0;
    virtual HRESULT GetDuration (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT GetTotalRecordingTimeAvailable (/* out */ uint32_t* totalRecordingTimeAvailable) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherRecordAV_v8_5_3 () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStreamRTMP_v8_5_3 - Switcher Stream RTMP Object */

class BMD_PUBLIC IBMDSwitcherStreamRTMP_v8_5_3 : public IUnknown
{
public:
    virtual HRESULT StartStreaming (void) = 0;
    virtual HRESULT StopStreaming (void) = 0;
    virtual HRESULT IsStreaming (/* out */ bool* streaming) = 0;
    virtual HRESULT GetStatus (/* out */ BMDSwitcherStreamRTMPState* state, /* out */ BMDSwitcherStreamRTMPError* error) = 0;
    virtual HRESULT SetServiceName (/* in */ CFStringRef serviceName) = 0;
    virtual HRESULT GetServiceName (/* out */ CFStringRef* serviceName) = 0;
    virtual HRESULT SetUrl (/* in */ CFStringRef url) = 0;
    virtual HRESULT GetUrl (/* out */ CFStringRef* url) = 0;
    virtual HRESULT SetKey (/* in */ CFStringRef url) = 0;
    virtual HRESULT GetKey (/* out */ CFStringRef* key) = 0;
    virtual HRESULT SetVideoBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
    virtual HRESULT GetVideoBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
    virtual HRESULT SetAudioBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
    virtual HRESULT GetAudioBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
    virtual HRESULT RequestDuration (void) = 0;
    virtual HRESULT GetDuration (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT GetEncodingBitrate (/* out */ uint32_t* encodingBitrate) = 0;
    virtual HRESULT GetCacheUsed (/* out */ double* cacheUsed) = 0;
    virtual HRESULT SetAuthentication (/* in */ CFStringRef username, /* in */ CFStringRef password) = 0;
    virtual HRESULT GetAuthentication (/* out */ CFStringRef* username, /* out */ CFStringRef* password) = 0;
    virtual HRESULT SetLowLatency (/* in */ bool lowLatency) = 0;
    virtual HRESULT GetLowLatency (/* out */ bool* lowLatency) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherStreamRTMP_v8_5_3 () {} // call Release method to drop reference count
};

class BMD_PUBLIC IBMDSwitcherFairlightAnalogAudioInput_v8_5_3 : public IUnknown
{
public:
    virtual HRESULT GetSupportedInputLevels (/* out */ BMDSwitcherFairlightAudioAnalogInputLevel* levels) = 0;
    virtual HRESULT GetInputLevel (/* out */ BMDSwitcherFairlightAudioAnalogInputLevel* level) = 0;
    virtual HRESULT SetInputLevel (/* in */ BMDSwitcherFairlightAudioAnalogInputLevel level) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAnalogAudioInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAnalogAudioInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAnalogAudioInput_v8_5_3 () {} // call Release method to drop reference count

};

#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_V8_5_3_H) */
